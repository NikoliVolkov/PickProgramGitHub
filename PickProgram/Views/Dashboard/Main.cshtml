@model DashboardViewModel
<h2>Add New Pick Ticket:</h2>
<strong><span class="text-success">@TempData["Message"]</span></strong>
<form class="form-horizontal" asp-controller="Dashboard" asp-action="" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label class="col-md-2 control-label" asp-for="NewInvoice.InvoiceNumber">Invoice Number <span class="glyphicon glyphicon-qrcode"></span></label>
        <div class="col-md-2">
            <input asp-for="NewInvoice.InvoiceNumber" class="form-control" />
        </div>
        <label class="col-md-2 control-label" asp-for="NewInvoice.NumberOfParts">No. of Parts</label>
        <div class="col-md-1">
            <input asp-for="NewInvoice.NumberOfParts" class="form-control" min="1" max="99" />
        </div>
        <label class="col-md-2 control-label" asp-for="NewInvoice.PickLocationId"></label>
        <div class="col-md-3">
            <select asp-for="NewInvoice.PickLocationId" asp-items="@(new SelectList(Model.PickLocations, "LocationId", "LocationDescription"))" class="form-control">
                <option value="">-- Select pick location --</option>
            </select>
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label" asp-for="NewInvoice.AssignedEmployeeId"></label>
        <div class="col-md-3">
            <select asp-for="NewInvoice.AssignedEmployeeId" asp-items="@Model.Employees" class="form-control">
                <option value="">-- Assign Employee --</option>
            </select>
        </div>
    </div>
    <input asp-for="NewInvoice.StatusId" type="hidden" value="1" />
    <input type="submit" class="btn btn-primary" value="Add" />
</form>

@Html.Partial("_InvoiceList", Model.ListOfInvoicesOnsite)
@Html.Partial("_InvoiceList", Model.ListOfInvoicesOffsite)

@section Scripts {
<script>
    


    jQuery(function ($) {
         $('.table').on({
            "ready.ft.table": function (e, ft) {
                initTimers();// bind to the plugin initialize event to do something
             },
            "after.ft.filtering": function (e, ft) {
                initTimers();// bind to the plugin initialize event to do something
            },
            "after.ft.sorting": function (e, ft) {
                initTimers();// bind to the plugin initialize event to do something
            },
            "after.ft.paging": function (e, ft) {
                initTimers();// bind to the plugin initialize event to do something
            }
        }).footable();
        var values = { // create a hash of the editor row values
            pickLocation: 'hello'
        };
        //$('.table').footable();
    });

        $('.table').last().data("paging-widget-count-format", "Total Pending Offsite: {TR}");
        $('.showHide').last().data("visible", false);

        /*$(document).ready(function () {
            $(".aa").each(function (i) {
                $(this).countdown({
                    since: new Date(Date.parse($(this).text())),
                    layout: '{hnn}:{mnn}:{snn}{desc}',
                    format: 'HMS'
                });
            });
        });*/
        function initTimers() {
            $(".timerCell:not(.is-countdown)").each(function (i) {
                if ($(this).text()) {
                    //var setDate = $(this).text().split('-')
                    //var setDate = $(this).text();
                    //alert(parseInt(setDate[0]) + ' ' + (parseInt(setDate[1])-1) + ' ' + parseInt(setDate[2]) + ' ' + parseInt(setDate[3]) + ' ' + parseInt(setDate[4]) + ' ' + parseInt(setDate[5]));
                    $(this).countdown({
                        //since: new Date(parseInt(setDate[0]), (parseInt(setDate[1]) - 1), parseInt(setDate[2]), parseInt(setDate[3]), parseInt(setDate[4]), parseInt(setDate[5])),
                        //since: new Date(2018, 1, 19, 23, 50, 0),
                        since: new Date(Date.parse($(this).text())),
                        layout: '{hnn}:{mnn}:{snn}{desc}',
                        format: 'HMS'
                    });
                }
            });
        }
        /*$(document).ready(function () {

        });*/



        function getEmpDDL(element) {

            //initTimers();
            var clickedButton = element;
            //element.closest("tr").find(".aa").html("glodi");
            //var rowId = element.closest("tr").find(".invoiceid").html();
            $.ajax({
                type: "GET",
                url: "/Dashboard/GetEmployeeDDL/",
                //data: { id: clickedButton.val(), access_token: $("#access_token").val() },
                success: function (result) {
                    element.parent().html(result);
                },
                error: function (result) {
                    element.parent().html("<span style=\"color:red;\">An error occurred. Please refresh the page.</span>");
                }
            });
        }

        function assignEmp(element) {

            var clickedButton = element;
            //console.log(clickedButton);
            var rowId = element.closest("tr").find(".invoiceid").html();
            //console.log(rowId)
            var selectedEmployee = element.closest("tr").find("select").val();
            var currentRow = FooTable.getRow(element);
            //console.log(selectedEmployee);


            $.ajax({
                type: "POST",
                url: "/Dashboard/AssignEmployee/" + rowId + "/" + selectedEmployee,
                //data: { id: clickedButton.val(), access_token: $("#access_token").val() },
                success: function (result) {
                    //element.closest("td").html("<span>" + result + "</span>");
                    var parsedResult = JSON.parse(result);
                    currentRow.val({ numOfParts: parsedResult.numOfParts, assignedEmployee: parsedResult.assignedEmployee, assignedOn: parsedResult.assignedOn, elapsedTime: "<span class=\"timerCell\">" + parsedResult.assignedOn + "</span>" });
                    //currentRow.val({ numOfParts: result.numOfParts, assignedEmployee: result.assignedEmployee, elapsedTime: "<span class=\"timerCell\">" + result.elapsedTime + "</span>" });
                    initTimers();
                },
                error: function (result) {
                    element.closest("td").html("<span style=\"color:red;\">An error occurred. Please refresh the page.</span>");
                }
            });

        }

        function restoreAddEmployee(element) {
            var clickedButton = element;
            
            var rowId = element.closest("tr").find(".invoiceid").html();
            console.log(rowId);
                    element.closest("td").html("<button id=\"assign" + rowId +"\" onclick=\"getEmpDDL($(this))\" type=\"button\" class=\"btn btn-default btn-sm\">Assign Employee <span class=\"glyphicon glyphicon-user\" aria-hidden=\"true\"></span></button>");
        }


        function mySortValue(valueOrElement) {
            return valueOrElement;
        }


</script>
}
